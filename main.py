#!/usr/bin/env python3
"""
ULTIMATE RENDER DEPLOYMENT SOLUTION
==================================
For√ßar carregamento do sistema completo
"""

import os
import sys

# Garantir que encontramos nossos m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def create_simple_app():
    """Cria a aplica√ß√£o Flask de forma robusta"""
    
    # FOR√áAR carregamento do sistema completo
    try:
        print("üöÄ Tentando carregar sistema ERP completo...")
        
        # Importar nossa app principal
        from app.app import create_app
        
        # Criar app em modo produ√ß√£o
        app = create_app('production')
        print("‚úÖ App principal criada com sucesso!")
        
        # Inicializar banco com DATABASE_URL
        if os.environ.get('DATABASE_URL'):
            try:
                with app.app_context():
                    from app.extensoes import db
                    
                    # Criar todas as tabelas
                    db.create_all()
                    print("‚úÖ Database PostgreSQL initialized!")
                    
                    # Criar usu√°rio admin se n√£o existir
                    try:
                        from app.auth.usuario_model import Usuario
                        admin = Usuario.query.filter_by(email='admin@jsp.com').first()
                        if not admin:
                            admin = Usuario(
                                nome='Administrador',
                                email='admin@jsp.com',
                                ativo=True
                            )
                            admin.set_password('admin123')
                            db.session.add(admin)
                            db.session.commit()
                            print("‚úÖ Admin user created!")
                        else:
                            print("‚úÖ Admin user exists!")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Admin user warning: {e}")
                        
            except Exception as e:
                print(f"‚ùå Database error: {e}")
                # N√£o falhar - continuar com SQLite
        
        print("‚úÖ Sistema ERP COMPLETO carregado!")
        return app
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar sistema principal: {e}")
        print("üîÑ Usando fallback m√≠nimo...")
        
        # Fallback apenas se REALMENTE n√£o conseguir
        from flask import Flask
        app = Flask(__name__)
        app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'emergency-key-123')
        
        @app.route('/')
        def hello():
            return """
            <h1>‚ùå ERP JSP - Erro de Configura√ß√£o</h1>
            <p>O sistema n√£o conseguiu carregar completamente.</p>
            <p>Verifique as vari√°veis de ambiente no Render.</p>
            <p>Erro: Sistema em modo de emerg√™ncia</p>
            """
        
        return app

# Criar a aplica√ß√£o
app = create_simple_app()

if __name__ == '__main__':
    # Configura√ß√£o para o Render
    port = int(os.environ.get('PORT', 10000))
    host = '0.0.0.0'
    
    print(f"üöÄ Starting ERP JSP on {host}:{port}")
    
    # RODAR COM FLASK BUILT-IN
    app.run(
        host=host,
        port=port,
        debug=False,
        threaded=True
    )